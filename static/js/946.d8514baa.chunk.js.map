{"version":3,"file":"static/js/946.d8514baa.chunk.js","mappings":"gNAGaA,EAAiB,WAAH,OAASC,EAAAA,EAAAA,KAA2B,EAClDC,EAAkDC,EAAAA,E,4FCClDC,EAAgC,SAACC,GAAa,OACzDA,EAAMC,iBAAiBC,WAAWC,IAAK,EAG5BC,EAA0B,SAACJ,GAAa,OACnDA,EAAMC,iBAAiBI,gBAAgBF,IAAK,EAGjCG,EAAgC,SAC3CN,GAAa,OAGVA,EAAMC,iBAAiBI,gBAAgBE,IAAK,EAGpCC,EAA6B,SAACR,GAAa,OACtDA,EAAMC,iBAAiBQ,OAAQ,EAGpBC,EAA0B,SAACV,GAAa,OACnDA,EAAMC,iBAAiBU,IAAK,EAGjBC,EAAmC,SAC9CZ,GAAa,OACUA,EAAMC,iBAAiBY,aAAc,EAGjDC,EAAiC,SAC5Cd,GAAa,OACSA,EAAMC,iBAAiBc,sBAAuB,EAGzDC,EAA0B,SAAChB,GAAa,OACnDA,EAAMC,iBAAiBgB,IAAK,E,sECpCjBC,GAAQC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,CAAY,CAC/BE,QAAS,OACTC,WAAY,SACZC,eAAgB,SAEhBC,aAAc,SAGHC,EAAe,CAC1BC,UAAW,SAACC,GAAa,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpBD,GAAQ,IACXE,MAAO,OACPC,SAAU,SAAO,G,oBCwFrB,EAjFoC,WAElC,IAAAC,GAA4BC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAGlBhB,GAAOpB,EAAAA,EAAAA,GAAemB,GAGtBP,GAAUZ,EAAAA,EAAAA,GAAeW,GAEzB6B,GAAW1C,EAAAA,EAAAA,MAGjB2C,EAAAA,EAAAA,YAAU,WACRD,GAASE,EAAAA,EAAAA,KACX,GAAG,CAACF,IAGJ,IA2BMG,GAAS3C,EAAAA,EAAAA,GAAeE,GAGxB0C,EACJN,GACAK,EACGL,QAAO,SAAAO,GAAc,OAAAA,EAAXC,YACGC,cAAcC,WAAWV,EAAOS,cAAc,IAI3DE,KAAI,SAAAC,GAAA,IAAGJ,EAAWI,EAAXJ,YAAW,MAAQ,CACzBK,MAAOL,EACPM,MAAON,EACR,IAEL,OAAIlC,GAAgByC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,KAGzBD,EAAAA,EAAAA,KAACE,EAAY,CAAAC,UACXH,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLC,cAAY,EACZC,OAAQJ,EACRK,cA5BoB,SAACT,GACzBZ,EAAUY,EACZ,EA2BMU,SAAU,SAACC,GAA8B,OAnDxB,SAACA,GAClBA,IAEFtB,GAASuB,EAAAA,EAAAA,IAAQD,EAAMX,QAGvBX,GAASwB,EAAAA,EAAAA,IAAuB,KAGhCxB,GAASyB,EAAAA,EAAAA,IAAQ,IAGjBzB,GACE0B,EAAAA,EAAAA,IAA0B,CACxBf,MAAM,+KACNC,MAAM,kLAId,CAgCoDe,CAAeL,EAAM,EACnEM,KAAK,SACLC,UAAQ,EACRC,YAAY,0GACZC,iBAAkB,iBAAM,oGAAoB,EAC5CC,QAAS5B,GAAyB,CAAC,CAAEO,MAAO/B,EAAMgC,MAAOhC,IACzDqD,cAAe,OAIvB,E,UClGapD,GAAQC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,CAAY,CAC/BE,QAAS,OACTC,WAAY,SACZC,eAAgB,SAEhBC,aAAc,SAGHC,EAAe,CAC1BC,UAAW,SAACC,GAAa,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpBD,GAAQ,IACXE,MAAO,OACPC,SAAU,SAAO,GC+DrB,EA5DoC,WAClC,IAAMO,GAAW1C,EAAAA,EAAAA,KAIX4E,GAAc1E,EAAAA,EAAAA,GAAeO,GAG7BW,GAAyBlB,EAAAA,EAAAA,GAAeiB,GAIxC0D,EAAqBD,EAAYE,OAAS,GAAC,CAC/C,CACEzB,MAAM,+KACNC,MAAM,iLACPyB,QAAAC,EAAAA,EAAAA,GAEEJ,EAAYzB,KAAI,SAAAJ,GAAA,IAAGC,EAAWD,EAAXC,YAAgB,MAAQ,CAC5CK,MAAOL,EACPM,MAAON,EACPiC,IAHoClC,EAAHkC,IAIlC,MAmBH,OACE1B,EAAAA,EAAAA,KAACE,EAAY,CAAAC,UACXH,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLI,SAAU,SAACmB,GAhBW,IAAClB,KAiBDkB,KAfxBxC,GAASwB,EAAAA,EAAAA,IAAuBF,EAAMiB,MACtCvC,GACE0B,EAAAA,EAAAA,IAA0B,CACxBf,MAAOW,EAAMX,MACbC,MAAOU,EAAMX,MACb4B,IAAKjB,EAAMiB,OAUkB,EAE/BpB,OAAQJ,EACRa,KAAK,cACLC,UAAQ,EACRY,WAAYP,EAAYE,OAAS,EACjCzB,MAAOjC,EACPqD,iBAAkB,iBAAM,6EAAiB,EACzCC,QAASG,GAAsB,CAAC,CAAExB,MAAO,GAAIC,MAAO,KACpDqB,cAAe,OAIvB,E,8BCzEapD,GAAQC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,CAAY,CAC/BE,QAAS,OACTC,WAAY,SACZC,eAAgB,SAEhBC,aAAc,SCkDhB,EAvCwC,WACtC,IAAMa,GAAW1C,EAAAA,EAAAA,KAIXoF,GAFWC,EAAAA,EAAAA,GAAc,qBAEG,QAAU,QAGpCC,GAAepF,EAAAA,EAAAA,GAAeS,GAA9B2E,WAGFtE,GAAOd,EAAAA,EAAAA,GAAea,GAa5B,OACEwC,EAAAA,EAAAA,KAACE,EAAY,CAAAC,UACXH,EAAAA,EAAAA,KAACgC,EAAAA,EAAK,CAACC,QAAS,EAAE9B,UAChBH,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CACTC,KAAMN,EACNrB,SAAU,SAAC4B,EAAGtC,GAAa,OAhBR,SAACA,GAC1BX,GAASyB,EAAAA,EAAAA,IAAQd,IACjBX,GAASwB,EAAAA,EAAAA,IAAuB,KAChCxB,GACE0B,EAAAA,EAAAA,IAA0B,CACxBf,MAAM,+KACNC,MAAM,iLAGZ,CAOwCsC,CAAmBvC,EAAM,EACzDwC,MAAOC,KAAKC,KAAKT,EAAa,IAC9BtE,KAAMA,EACNgF,MAAM,eAKhB,E,iDCmBA,EA5DyD,SAAHjD,GAExB,IAD5BrC,EAAeqC,EAAfrC,gBAGMI,GAAUZ,EAAAA,EAAAA,GAAeW,GAEzBoF,EAAyB,CAC7BC,OAAQ,yDACRC,QAAS,mDACTC,UAAW,uCACXC,SAAU,uCACVC,OAAQ,8CACRC,SAAU,uCACVC,OAAQ,wCAGV,OAAI1F,GAAgByC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,KAEzBD,EAAAA,EAAAA,KAACkD,EAAAA,GAAI,CAAC1E,WAAS,EAACyD,QAAS,EAAE9B,SACxBhD,EAAgByC,KACf,SAAAC,GAAA,IAAGJ,EAAWI,EAAXJ,YAAa0D,EAAetD,EAAfsD,gBAAiBC,EAAQvD,EAARuD,SAAUC,EAAKxD,EAALwD,MAAK,OAC9CrD,EAAAA,EAAAA,KAACkD,EAAAA,GAAI,CAACI,MAAI,EAAgBC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEtD,UAC7CH,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CAACC,GAAI,CAAEC,OAAQ,QAASzD,UAC3B0D,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAA3D,SAAA,EACVH,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,IAAIC,cAAY,EAAA/D,SAAA,GAAAqB,OAC7C/B,EAAW,MAAA+B,OAAK2B,KAGrBE,IACCrD,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CAACJ,GAAI,CAAEQ,SAAU,IAAMF,UAAU,IAAIC,cAAY,EAAA/D,SAAA,gDAAAqB,OAC5C6B,MAIlBrD,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CACTJ,GAAI,CAAEQ,SAAU,GAAIC,MAAO,WAC3BH,UAAU,IACVC,cAAY,EAAA/D,SACb,0EAGAkE,OAAOC,QAAQlB,GAAUxD,KAAI,SAAA2E,GAAA,IAAAC,GAAAxF,EAAAA,EAAAA,GAAAuF,EAAA,GAAEE,EAAGD,EAAA,GAAEE,EAAIF,EAAA,UACvCxE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CACTE,UAAU,IACVC,cAAY,EACZF,QAAQ,QAAO7D,SAAA,GAAAqB,OAGXkB,EAAS+B,GAA0B,MAAAjD,OAAKkD,KAFvCC,EAAAA,EAAAA,MAGM,WA5BLA,EAAAA,EAAAA,MAgCT,KAKjB,E,UCRA,EAzC4B,WAC1B,IAAMxF,GAAW1C,EAAAA,EAAAA,KAEX4E,GAAc1E,EAAAA,EAAAA,GAAeO,GAC7BO,GAAOd,EAAAA,EAAAA,GAAea,GACtBG,GAAgBhB,EAAAA,EAAAA,GAAee,GAC/BK,GAAOpB,EAAAA,EAAAA,GAAemB,IAE5BsB,EAAAA,EAAAA,YAAU,WACJrB,GAAMoB,GAASyF,EAAAA,EAAAA,GAAe,CAAE7G,KAAAA,EAAMN,KAAAA,IAC5C,GAAG,CAAC0B,EAAUpB,EAAMN,IAEpB,IAAMoH,EAAsBxD,EAAYpC,QACtC,SAAAO,GAAM,OAAAA,EAAHkC,MAAkB/D,CAAa,IAG9BR,EAAkBQ,EAAgBkH,EAAsBxD,EAE9D,OACEwC,EAAAA,EAAAA,MAAAiB,EAAAA,SAAA,CAAA3E,SAAA,EACEH,EAAAA,EAAAA,KAAC+E,EAAAA,GAAM,KACPlB,EAAAA,EAAAA,MAAA,WAAA1D,SAAA,EACEH,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CACT,aAAW,qKACXC,QAAQ,KACRC,UAAW,KACXN,GAAI,CAAExF,QAAS,QAASgC,SACzB,uFAGD0D,EAAAA,EAAAA,MAACmB,EAAAA,EAAS,CAACrB,GAAI,CAAEsB,GAAI,OAAQC,GAAI,QAAS/E,SAAA,EACxCH,EAAAA,EAAAA,KAACmF,EAAY,KACbnF,EAAAA,EAAAA,KAACoF,EAAiB,IACjB/D,EAAYE,OAAS,IAAKvB,EAAAA,EAAAA,KAACqF,EAAqB,IAChDtH,IAAQiC,EAAAA,EAAAA,KAACsF,EAAe,CAACnI,gBAAiBA,YAKrD,C","sources":["hooks/reduxHooks.ts","redux/selectors/departmentsSelectors.ts","components/Departments/CitiesSelect/CitiesSelect.styled.ts","components/Departments/CitiesSelect/CitiesSelect.tsx","components/Departments/DepartmentsSelect/DepartmentsSelect.styled.ts","components/Departments/DepartmentsSelect/DepartmentsSelect.tsx","components/Departments/DepartmentsPagination/DepartmentsPagination.styled.ts","components/Departments/DepartmentsPagination/DepartmentsPagination.tsx","components/Departments/DepartmentsList/DepartmentsList.tsx","pages/PageDepartments/PageDepartments.tsx"],"sourcesContent":["import { useDispatch, useSelector, TypedUseSelectorHook } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"../redux/store/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { SelectValuesTypes } from \"../../types/departments-components.types\";\nimport { IState } from \"../../types/redux.types\";\nimport { ObjectData } from \"../../types/redux.types\";\n\n// All cities\nexport const departmentsCitiesDataSelector = (state: IState): [] | ObjectData =>\n  state.departmentsState.citiesData.data;\n\n// Get departments for city\nexport const departmentsDataSelector = (state: IState): [] | ObjectData =>\n  state.departmentsState.departmentsData.data;\n\n// Total count for pagination\nexport const departmentsTotalCountSelector = (\n  state: IState\n): {\n  totalCount: number;\n} => state.departmentsState.departmentsData.info;\n\n// Loading status\nexport const departmentsLoadingSelector = (state: IState): boolean =>\n  state.departmentsState.loading;\n\n// Page value\nexport const departmentsPageSelector = (state: IState): number =>\n  state.departmentsState.page;\n\n// Ref value for find and render one card with dpt\nexport const departmentsDepartmentRefSelector = (\n  state: IState\n): string | undefined => state.departmentsState.departmentRef;\n\n// Dpt select value, need for refetching, and choosing value\nexport const departmentsSelectValueSelector = (\n  state: IState\n): SelectValuesTypes => state.departmentsState.departmentsSelectValue;\n\n// Get city for fetch data with pagination, and for this city\nexport const departmentsCitySelector = (state: IState): string =>\n  state.departmentsState.city;\n","import { styled } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\n\nexport const MyBox = styled(Box)({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n\n  marginBottom: \"2rem\",\n});\n\nexport const selectStyles = {\n  container: (provided: any) => ({\n    ...provided,\n    width: \"100%\",\n    maxWidth: \"600px\",\n  }),\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/reduxHooks\";\nimport { getDepartmentsCities } from \"../../../redux/operations/departmentsOperations\";\nimport {\n  departmentsCitiesDataSelector,\n  departmentsCitySelector,\n  departmentsLoadingSelector,\n} from \"../../../redux/selectors/departmentsSelectors\";\nimport {\n  setDepartmentsSelectValue,\n  setFindDepartmentByRef,\n  setPage,\n  setCity,\n} from \"../../../redux/slices/departmentsSlice\";\n\nimport { SelectOnChangeEventType } from \"../../../types/departments-components.types\";\n\nimport Select from \"react-select\";\nimport * as Styled from \"./CitiesSelect.styled\";\nimport { Loader } from \"../../Common\";\n\nconst CitiesSelect: React.FC<any> = (): JSX.Element => {\n  // Filter for filtration cities\n  const [filter, setFilter] = useState<string>(\"\");\n\n  // Get city\n  const city = useAppSelector(departmentsCitySelector);\n\n  // Get laoding status\n  const loading = useAppSelector(departmentsLoadingSelector);\n\n  const dispatch = useAppDispatch();\n\n  // Fetch all cities\n  useEffect(() => {\n    dispatch(getDepartmentsCities());\n  }, [dispatch]);\n\n  // Hadler cities on Change\n  const citiesOnChange = (event: SelectOnChangeEventType) => {\n    if (event) {\n      // Send city for get all departments\n      dispatch(setCity(event.value));\n\n      // Reset Ref for render one card by Ref, for each change city\n      dispatch(setFindDepartmentByRef(\"\"));\n\n      // Reset page for each change city\n      dispatch(setPage(1));\n\n      // Resest departments initial select values, for each change city\n      dispatch(\n        setDepartmentsSelectValue({\n          value: `Відділення для поточної сторiнки`,\n          label: `Відділення для поточної сторiнки`,\n        })\n      );\n    }\n  };\n\n  // Set select input value to filter state\n  const citiesInputChange = (value: string) => {\n    setFilter(value);\n  };\n\n  // Get all cities from redux state\n  const cities = useAppSelector(departmentsCitiesDataSelector);\n\n  // If filter is active => Filtered all cities in select\n  const filteredCitiesOptions =\n    filter &&\n    cities\n      .filter(({ Description }) =>\n        Description.toLowerCase().startsWith(filter.toLowerCase())\n      )\n\n      // Transform filtered cities to options array values for select\n      .map(({ Description }) => ({\n        value: Description,\n        label: Description,\n      }));\n\n  if (loading) return <Loader />;\n\n  return (\n    <Styled.MyBox>\n      <Select\n        isSearchable\n        styles={Styled.selectStyles}\n        onInputChange={citiesInputChange}\n        onChange={(event: SelectOnChangeEventType) => citiesOnChange(event)}\n        name=\"cities\"\n        required\n        placeholder=\"Почнiть вводити мicто..\"\n        noOptionsMessage={() => \"Немає такого міста\"}\n        options={filteredCitiesOptions || [{ value: city, label: city }]}\n        maxMenuHeight={200}\n      />\n    </Styled.MyBox>\n  );\n};\n\nexport default CitiesSelect;\n","import { styled } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\n\nexport const MyBox = styled(Box)({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n\n  marginBottom: \"2rem\",\n});\n\nexport const selectStyles = {\n  container: (provided: any) => ({\n    ...provided,\n    width: \"100%\",\n    maxWidth: \"600px\",\n  }),\n};\n","import React from \"react\";\nimport Select from \"react-select\";\n\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/reduxHooks\";\nimport {\n  departmentsDataSelector,\n  departmentsSelectValueSelector,\n} from \"../../../redux/selectors/departmentsSelectors\";\n\nimport {\n  setDepartmentsSelectValue,\n  setFindDepartmentByRef,\n} from \"../../../redux/slices/departmentsSlice\";\n\nimport { SelectOnChangeEventType } from \"../../../types/departments-components.types\";\n\nimport * as Styled from \"./DepartmentsSelect.styled\";\n\nconst DepartmentsSelect: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  // Get departments from redux store for city\n  // With pagination 12 dept for 1 page\n  const departments = useAppSelector(departmentsDataSelector);\n\n  // Get departments select value\n  const departmentsSelectValue = useAppSelector(departmentsSelectValueSelector);\n\n  // If departments true Transform departments to options array values for select\n  // With primary value\n  const departmentsOptions = departments.length > 0 && [\n    {\n      value: `Відділення для поточної сторiнки`,\n      label: `Відділення для поточної сторiнки`,\n    },\n\n    ...departments.map(({ Description, Ref }) => ({\n      value: Description,\n      label: Description,\n      Ref,\n    })),\n  ];\n\n  // Handler for rendering one card for Ref\n  // In DepartmentsList if DepartmentRef true, user get one card with dpt by ref\n  // If DepartmentRef false user get all cards with dpt\n  const departmentsOnChange = (event: SelectOnChangeEventType) => {\n    if (event) {\n      dispatch(setFindDepartmentByRef(event.Ref));\n      dispatch(\n        setDepartmentsSelectValue({\n          value: event.value,\n          label: event.value,\n          Ref: event.Ref,\n        })\n      );\n    }\n  };\n\n  return (\n    <Styled.MyBox>\n      <Select\n        onChange={(newValue: SelectOnChangeEventType) =>\n          departmentsOnChange(newValue)\n        }\n        styles={Styled.selectStyles}\n        name=\"departments\"\n        required\n        isDisabled={departments.length < 1}\n        value={departmentsSelectValue}\n        noOptionsMessage={() => \"Не обрано мiсто\"}\n        options={departmentsOptions || [{ value: \"\", label: \"\" }]}\n        maxMenuHeight={200}\n      />\n    </Styled.MyBox>\n  );\n};\n\nexport default DepartmentsSelect;\n","import { styled } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\n\nexport const MyBox = styled(Box)({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n\n  marginBottom: \"2rem\",\n});\n","import { Pagination, Stack } from \"@mui/material\";\nimport React from \"react\";\nimport { useAppSelector } from \"../../../hooks/reduxHooks\";\nimport {\n  departmentsPageSelector,\n  departmentsTotalCountSelector,\n} from \"../../../redux/selectors/departmentsSelectors\";\nimport {\n  setDepartmentsSelectValue,\n  setFindDepartmentByRef,\n  setPage,\n} from \"../../../redux/slices/departmentsSlice\";\n\nimport { useAppDispatch } from \"../../../hooks/reduxHooks\";\n\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\nimport * as Styled from \"./DepartmentsPagination.styled\";\n\nconst DepartmentsPagination: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const isTablet = useMediaQuery(\"(min-width:768px)\");\n\n  const paginationSize = isTablet ? \"large\" : \"small\";\n\n  // Get total count of departments from redux store\n  const { totalCount } = useAppSelector(departmentsTotalCountSelector);\n\n  // Get page value from redux store\n  const page = useAppSelector(departmentsPageSelector);\n\n  const paginationOnChange = (value: number) => {\n    dispatch(setPage(value));\n    dispatch(setFindDepartmentByRef(\"\"));\n    dispatch(\n      setDepartmentsSelectValue({\n        value: `Відділення для поточної сторiнки`,\n        label: `Відділення для поточної сторiнки`,\n      })\n    );\n  };\n\n  return (\n    <Styled.MyBox>\n      <Stack spacing={2}>\n        <Pagination\n          size={paginationSize}\n          onChange={(_, value: number) => paginationOnChange(value)}\n          count={Math.ceil(totalCount / 12)}\n          page={page}\n          shape=\"rounded\"\n        />\n      </Stack>\n    </Styled.MyBox>\n  );\n};\n\nexport default DepartmentsPagination;\n","import React from \"react\";\n\nimport {\n  IDepartmentsListProps,\n  IDaySchedule,\n} from \"../../../types/departments-components.types\";\n\nimport { useAppSelector } from \"../../../hooks/reduxHooks\";\nimport { departmentsLoadingSelector } from \"../../../redux/selectors/departmentsSelectors\";\n\nimport { Grid, Card, CardContent, Typography } from \"@mui/material\";\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nimport { Loader } from \"../../Common\";\n\nconst DepartmentsList: React.FC<IDepartmentsListProps> = ({\n  departmentsData,\n}: IDepartmentsListProps) => {\n  // Get loading status\n  const loading = useAppSelector(departmentsLoadingSelector);\n\n  const dayNames: IDaySchedule = {\n    Monday: \"Понеділок\",\n    Tuesday: \"Вівторок\",\n    Wednesday: \"Середа\",\n    Thursday: \"Четвер\",\n    Friday: \"П'ятниця\",\n    Saturday: \"Субота\",\n    Sunday: \"Неділя\",\n  };\n\n  if (loading) return <Loader />;\n  return (\n    <Grid container spacing={2}>\n      {departmentsData.map(\n        ({ Description, CityDescription, Schedule, Phone }) => (\n          <Grid item key={nanoid()} xs={12} sm={6} md={4}>\n            <Card sx={{ height: \"100%\" }}>\n              <CardContent>\n                <Typography variant=\"h6\" component=\"p\" gutterBottom>\n                  {`${Description}, ${CityDescription}`}\n                </Typography>\n\n                {Phone && (\n                  <Typography sx={{ fontSize: 16 }} component=\"p\" gutterBottom>\n                    {`Телефон: +${Phone}`}\n                  </Typography>\n                )}\n\n                <Typography\n                  sx={{ fontSize: 18, color: \"#1976d2\" }}\n                  component=\"p\"\n                  gutterBottom\n                >\n                  Графiк роботи:\n                </Typography>\n                {Object.entries(Schedule).map(([day, time]) => (\n                  <Typography\n                    component=\"p\"\n                    gutterBottom\n                    variant=\"body2\"\n                    key={nanoid()}\n                  >\n                    {`${dayNames[day as keyof IDaySchedule]}: ${time}`}\n                  </Typography>\n                ))}\n              </CardContent>\n            </Card>\n          </Grid>\n        )\n      )}\n    </Grid>\n  );\n};\n\nexport default DepartmentsList;\n","import React, { FC, useEffect } from \"react\";\n\nimport { useAppDispatch, useAppSelector } from \"../../hooks/reduxHooks\";\n\nimport {\n  departmentsDataSelector,\n  departmentsPageSelector,\n  departmentsDepartmentRefSelector,\n  departmentsCitySelector,\n} from \"../../redux/selectors/departmentsSelectors\";\n\nimport { getDepartments } from \"../../redux/operations/departmentsOperations\";\n\nimport {\n  CitiesSelect,\n  DepartmentsList,\n  DepartmentsPagination,\n  DepartmentsSelect,\n} from \"../../components/Departments\";\n\nimport { Header } from \"../../components/Common\";\n\nimport { Container, Typography } from \"@mui/material\";\n\nconst PageDepartments: FC = () => {\n  const dispatch = useAppDispatch();\n\n  const departments = useAppSelector(departmentsDataSelector);\n  const page = useAppSelector(departmentsPageSelector);\n  const departmentRef = useAppSelector(departmentsDepartmentRefSelector);\n  const city = useAppSelector(departmentsCitySelector);\n\n  useEffect(() => {\n    if (city) dispatch(getDepartments({ city, page }));\n  }, [dispatch, city, page]);\n\n  const filteredDepartments = departments.filter(\n    ({ Ref }) => Ref === departmentRef\n  );\n\n  const departmentsData = departmentRef ? filteredDepartments : departments;\n\n  return (\n    <>\n      <Header />\n      <section>\n        <Typography\n          aria-label=\"Заголовок секцiiСписок вiддiлень\"\n          variant=\"h1\"\n          component={\"h2\"}\n          sx={{ display: \"none\" }}\n        >\n          Список вiддiлень\n        </Typography>\n        <Container sx={{ pt: \"3rem\", pb: \"3rem\" }}>\n          <CitiesSelect />\n          <DepartmentsSelect />\n          {departments.length > 0 && <DepartmentsPagination />}\n          {city && <DepartmentsList departmentsData={departmentsData} />}\n        </Container>\n      </section>\n    </>\n  );\n};\n\nexport default PageDepartments;\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","departmentsCitiesDataSelector","state","departmentsState","citiesData","data","departmentsDataSelector","departmentsData","departmentsTotalCountSelector","info","departmentsLoadingSelector","loading","departmentsPageSelector","page","departmentsDepartmentRefSelector","departmentRef","departmentsSelectValueSelector","departmentsSelectValue","departmentsCitySelector","city","MyBox","styled","Box","display","alignItems","justifyContent","marginBottom","selectStyles","container","provided","_objectSpread","width","maxWidth","_useState","useState","_useState2","_slicedToArray","filter","setFilter","dispatch","useEffect","getDepartmentsCities","cities","filteredCitiesOptions","_ref","Description","toLowerCase","startsWith","map","_ref2","value","label","_jsx","Loader","Styled","children","Select","isSearchable","styles","onInputChange","onChange","event","setCity","setFindDepartmentByRef","setPage","setDepartmentsSelectValue","citiesOnChange","name","required","placeholder","noOptionsMessage","options","maxMenuHeight","departments","departmentsOptions","length","concat","_toConsumableArray","Ref","newValue","isDisabled","paginationSize","useMediaQuery","totalCount","Stack","spacing","Pagination","size","_","paginationOnChange","count","Math","ceil","shape","dayNames","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","Grid","CityDescription","Schedule","Phone","item","xs","sm","md","Card","sx","height","_jsxs","CardContent","Typography","variant","component","gutterBottom","fontSize","color","Object","entries","_ref3","_ref4","day","time","nanoid","getDepartments","filteredDepartments","_Fragment","Header","Container","pt","pb","CitiesSelect","DepartmentsSelect","DepartmentsPagination","DepartmentsList"],"sourceRoot":""}