{"version":3,"file":"static/js/946.e72e5618.chunk.js","mappings":"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","sources":["hooks/reduxHooks.ts","redux/selectors/departmentsSelectors.ts","components/Departments/CitiesSelect/CitiesSelect.styled.ts","components/Departments/CitiesSelect/CitiesSelect.tsx","components/Departments/DepartmentsSelect/DepartmentsSelect.styled.ts","components/Departments/DepartmentsSelect/DepartmentsSelect.tsx","components/Departments/DepartmentsPagination/DepartmentsPagination.styled.ts","components/Departments/DepartmentsPagination/DepartmentsPagination.tsx","components/Departments/DepartmentsList/DepartmentsList.tsx","pages/PageDepartments/PageDepartments.tsx"],"sourcesContent":["import { useDispatch, useSelector, TypedUseSelectorHook } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"../redux/store/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { SelectValuesTypes } from \"../../types/departments-components.types\";\r\nimport { IState } from \"../../types/redux.types\";\r\nimport { ObjectData } from \"../../types/redux.types\";\r\n\r\n// All cities\r\nexport const departmentsCitiesDataSelector = (state: IState): [] | ObjectData =>\r\n  state.departmentsState.citiesData.data;\r\n\r\n// Get departments for city\r\nexport const departmentsDataSelector = (state: IState): [] | ObjectData =>\r\n  state.departmentsState.departmentsData.data;\r\n\r\n// Total count for pagination\r\nexport const departmentsTotalCountSelector = (\r\n  state: IState\r\n): {\r\n  totalCount: number;\r\n} => state.departmentsState.departmentsData.info;\r\n\r\n// Loading status\r\nexport const departmentsLoadingSelector = (state: IState): boolean =>\r\n  state.departmentsState.loading;\r\n\r\n// Page value\r\nexport const departmentsPageSelector = (state: IState): number =>\r\n  state.departmentsState.page;\r\n\r\n// Ref value for find and render one card with dpt\r\nexport const departmentsDepartmentRefSelector = (\r\n  state: IState\r\n): string | undefined => state.departmentsState.departmentRef;\r\n\r\n// Dpt select value, need for refetching, and choosing value\r\nexport const departmentsSelectValueSelector = (\r\n  state: IState\r\n): SelectValuesTypes => state.departmentsState.departmentsSelectValue;\r\n\r\n// Get city for fetch data with pagination, and for this city\r\nexport const departmentsCitySelector = (state: IState): string =>\r\n  state.departmentsState.city;\r\n","import { styled } from \"@mui/styles\";\r\nimport { Box } from \"@mui/material\";\r\n\r\nexport const MyBox = styled(Box)({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n\r\n  marginBottom: \"2rem\",\r\n});\r\n\r\nexport const selectStyles = {\r\n  container: (provided: any) => ({\r\n    ...provided,\r\n    width: \"100%\",\r\n    maxWidth: \"600px\",\r\n  }),\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/reduxHooks\";\r\nimport { getDepartmentsCities } from \"../../../redux/operations/departmentsOperations\";\r\nimport {\r\n  departmentsCitiesDataSelector,\r\n  departmentsCitySelector,\r\n  departmentsLoadingSelector,\r\n} from \"../../../redux/selectors/departmentsSelectors\";\r\nimport {\r\n  setDepartmentsSelectValue,\r\n  setFindDepartmentByRef,\r\n  setPage,\r\n  setCity,\r\n} from \"../../../redux/slices/departmentsSlice\";\r\n\r\nimport { SelectOnChangeEventType } from \"../../../types/departments-components.types\";\r\n\r\nimport Select from \"react-select\";\r\nimport * as Styled from \"./CitiesSelect.styled\";\r\nimport { Loader } from \"../../Common\";\r\n\r\nconst CitiesSelect: React.FC<any> = (): JSX.Element => {\r\n  // Filter for filtration cities\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n\r\n  // Get city\r\n  const city = useAppSelector(departmentsCitySelector);\r\n\r\n  // Get laoding status\r\n  const loading = useAppSelector(departmentsLoadingSelector);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Fetch all cities\r\n  useEffect(() => {\r\n    dispatch(getDepartmentsCities());\r\n  }, [dispatch]);\r\n\r\n  // Hadler cities on Change\r\n  const citiesOnChange = (event: SelectOnChangeEventType) => {\r\n    if (event) {\r\n      // Send city for get all departments\r\n      dispatch(setCity(event.value));\r\n\r\n      // Reset Ref for render one card by Ref, for each change city\r\n      dispatch(setFindDepartmentByRef(\"\"));\r\n\r\n      // Reset page for each change city\r\n      dispatch(setPage(1));\r\n\r\n      // Resest departments initial select values, for each change city\r\n      dispatch(\r\n        setDepartmentsSelectValue({\r\n          value: `Відділення для поточної сторiнки`,\r\n          label: `Відділення для поточної сторiнки`,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  // Set select input value to filter state\r\n  const citiesInputChange = (value: string) => {\r\n    setFilter(value);\r\n  };\r\n\r\n  // Get all cities from redux state\r\n  const cities = useAppSelector(departmentsCitiesDataSelector);\r\n\r\n  // If filter is active => Filtered all cities in select\r\n  const filteredCitiesOptions =\r\n    filter &&\r\n    cities\r\n      .filter(({ Description }) =>\r\n        Description.toLowerCase().startsWith(filter.toLowerCase())\r\n      )\r\n\r\n      // Transform filtered cities to options array values for select\r\n      .map(({ Description }) => ({\r\n        value: Description,\r\n        label: Description,\r\n      }));\r\n\r\n  if (loading) return <Loader />;\r\n\r\n  return (\r\n    <Styled.MyBox>\r\n      <Select\r\n        isSearchable\r\n        styles={Styled.selectStyles}\r\n        onInputChange={citiesInputChange}\r\n        onChange={(event: SelectOnChangeEventType) => citiesOnChange(event)}\r\n        name=\"cities\"\r\n        required\r\n        placeholder=\"Почнiть вводити мicто..\"\r\n        noOptionsMessage={() => \"Немає такого міста\"}\r\n        options={filteredCitiesOptions || [{ value: city, label: city }]}\r\n        maxMenuHeight={200}\r\n      />\r\n    </Styled.MyBox>\r\n  );\r\n};\r\n\r\nexport default CitiesSelect;\r\n","import { styled } from \"@mui/styles\";\r\nimport { Box } from \"@mui/material\";\r\n\r\nexport const MyBox = styled(Box)({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n\r\n  marginBottom: \"2rem\",\r\n});\r\n\r\nexport const selectStyles = {\r\n  container: (provided: any) => ({\r\n    ...provided,\r\n    width: \"100%\",\r\n    maxWidth: \"600px\",\r\n  }),\r\n};\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/reduxHooks\";\r\nimport {\r\n  departmentsDataSelector,\r\n  departmentsSelectValueSelector,\r\n} from \"../../../redux/selectors/departmentsSelectors\";\r\n\r\nimport {\r\n  setDepartmentsSelectValue,\r\n  setFindDepartmentByRef,\r\n} from \"../../../redux/slices/departmentsSlice\";\r\n\r\nimport { SelectOnChangeEventType } from \"../../../types/departments-components.types\";\r\n\r\nimport * as Styled from \"./DepartmentsSelect.styled\";\r\n\r\nconst DepartmentsSelect: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Get departments from redux store for city\r\n  // With pagination 12 dept for 1 page\r\n  const departments = useAppSelector(departmentsDataSelector);\r\n\r\n  // Get departments select value\r\n  const departmentsSelectValue = useAppSelector(departmentsSelectValueSelector);\r\n\r\n  // If departments true Transform departments to options array values for select\r\n  // With primary value\r\n  const departmentsOptions = departments.length > 0 && [\r\n    {\r\n      value: `Відділення для поточної сторiнки`,\r\n      label: `Відділення для поточної сторiнки`,\r\n    },\r\n\r\n    ...departments.map(({ Description, Ref }) => ({\r\n      value: Description,\r\n      label: Description,\r\n      Ref,\r\n    })),\r\n  ];\r\n\r\n  // Handler for rendering one card for Ref\r\n  // In DepartmentsList if DepartmentRef true, user get one card with dpt by ref\r\n  // If DepartmentRef false user get all cards with dpt\r\n  const departmentsOnChange = (event: SelectOnChangeEventType) => {\r\n    if (event) {\r\n      dispatch(setFindDepartmentByRef(event.Ref));\r\n      dispatch(\r\n        setDepartmentsSelectValue({\r\n          value: event.value,\r\n          label: event.value,\r\n          Ref: event.Ref,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Styled.MyBox>\r\n      <Select\r\n        onChange={(newValue: SelectOnChangeEventType) =>\r\n          departmentsOnChange(newValue)\r\n        }\r\n        styles={Styled.selectStyles}\r\n        name=\"departments\"\r\n        required\r\n        isDisabled={departments.length < 1}\r\n        value={departmentsSelectValue}\r\n        noOptionsMessage={() => \"Не обрано мiсто\"}\r\n        options={departmentsOptions || [{ value: \"\", label: \"\" }]}\r\n        maxMenuHeight={200}\r\n      />\r\n    </Styled.MyBox>\r\n  );\r\n};\r\n\r\nexport default DepartmentsSelect;\r\n","import { styled } from \"@mui/styles\";\r\nimport { Box } from \"@mui/material\";\r\n\r\nexport const MyBox = styled(Box)({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n\r\n  marginBottom: \"2rem\",\r\n});\r\n","import { Pagination, Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { useAppSelector } from \"../../../hooks/reduxHooks\";\r\nimport {\r\n  departmentsPageSelector,\r\n  departmentsTotalCountSelector,\r\n} from \"../../../redux/selectors/departmentsSelectors\";\r\nimport {\r\n  setDepartmentsSelectValue,\r\n  setFindDepartmentByRef,\r\n  setPage,\r\n} from \"../../../redux/slices/departmentsSlice\";\r\n\r\nimport { useAppDispatch } from \"../../../hooks/reduxHooks\";\r\n\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\n\r\nimport * as Styled from \"./DepartmentsPagination.styled\";\r\n\r\nconst DepartmentsPagination: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const isTablet = useMediaQuery(\"(min-width:768px)\");\r\n\r\n  const paginationSize = isTablet ? \"large\" : \"small\";\r\n\r\n  // Get total count of departments from redux store\r\n  const { totalCount } = useAppSelector(departmentsTotalCountSelector);\r\n\r\n  // Get page value from redux store\r\n  const page = useAppSelector(departmentsPageSelector);\r\n\r\n  const paginationOnChange = (value: number) => {\r\n    dispatch(setPage(value));\r\n    dispatch(setFindDepartmentByRef(\"\"));\r\n    dispatch(\r\n      setDepartmentsSelectValue({\r\n        value: `Відділення для поточної сторiнки`,\r\n        label: `Відділення для поточної сторiнки`,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Styled.MyBox>\r\n      <Stack spacing={2}>\r\n        <Pagination\r\n          size={paginationSize}\r\n          onChange={(_, value: number) => paginationOnChange(value)}\r\n          count={Math.ceil(totalCount / 12)}\r\n          page={page}\r\n          shape=\"rounded\"\r\n        />\r\n      </Stack>\r\n    </Styled.MyBox>\r\n  );\r\n};\r\n\r\nexport default DepartmentsPagination;\r\n","import React from \"react\";\r\n\r\nimport { IDepartmentsListProps } from \"../../../types/departments-components.types\";\r\n\r\nimport { useAppSelector } from \"../../../hooks/reduxHooks\";\r\nimport { departmentsLoadingSelector } from \"../../../redux/selectors/departmentsSelectors\";\r\n\r\nimport { Grid, Card, CardContent, Typography } from \"@mui/material\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nimport { Loader } from \"../../Common\";\r\n\r\nconst DepartmentsList: React.FC<IDepartmentsListProps> = ({\r\n  departmentsData,\r\n}: IDepartmentsListProps) => {\r\n  // Get loading status\r\n  const loading = useAppSelector(departmentsLoadingSelector);\r\n\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid container spacing={2}>\r\n      {departmentsData.map(\r\n        ({ Description, CityDescription, Schedule, Phone }) => (\r\n          <Grid item key={nanoid()} xs={12} sm={6} md={4}>\r\n            <Card sx={{ height: \"100%\" }}>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" component=\"p\" gutterBottom>\r\n                  {`${Description}, ${CityDescription}`}\r\n                </Typography>\r\n\r\n                {Phone && (\r\n                  <Typography sx={{ fontSize: 16 }} component=\"p\" gutterBottom>\r\n                    {`Телефон: +${Phone}`}\r\n                  </Typography>\r\n                )}\r\n\r\n                <Typography\r\n                  sx={{ fontSize: 18, color: \"#1976d2\" }}\r\n                  component=\"p\"\r\n                  gutterBottom\r\n                >\r\n                  Графiк роботи:\r\n                </Typography>\r\n                {Object.entries(Schedule).map(([day, time]) => (\r\n                  <Typography\r\n                    component=\"p\"\r\n                    gutterBottom\r\n                    variant=\"body2\"\r\n                    key={nanoid()}\r\n                  >\r\n                    {`${day}: ${time}`}\r\n                  </Typography>\r\n                ))}\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        )\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DepartmentsList;\r\n","import React, { FC, useEffect } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/reduxHooks\";\r\n\r\nimport {\r\n  departmentsDataSelector,\r\n  departmentsPageSelector,\r\n  departmentsDepartmentRefSelector,\r\n  departmentsCitySelector,\r\n} from \"../../redux/selectors/departmentsSelectors\";\r\n\r\nimport { getDepartments } from \"../../redux/operations/departmentsOperations\";\r\n\r\nimport {\r\n  CitiesSelect,\r\n  DepartmentsList,\r\n  DepartmentsPagination,\r\n  DepartmentsSelect,\r\n} from \"../../components/Departments\";\r\n\r\nimport { Header } from \"../../components/Common\";\r\n\r\nimport { Container, Typography } from \"@mui/material\";\r\n\r\nconst PageDepartments: FC = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const departments = useAppSelector(departmentsDataSelector);\r\n  const page = useAppSelector(departmentsPageSelector);\r\n  const departmentRef = useAppSelector(departmentsDepartmentRefSelector);\r\n  const city = useAppSelector(departmentsCitySelector);\r\n\r\n  useEffect(() => {\r\n    if (city) dispatch(getDepartments({ city, page }));\r\n  }, [dispatch, city, page]);\r\n\r\n  const filteredDepartments = departments.filter(\r\n    ({ Ref }) => Ref === departmentRef\r\n  );\r\n\r\n  const departmentsData = departmentRef ? filteredDepartments : departments;\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <section>\r\n        <Typography\r\n          aria-label=\"Заголовок секцiiСписок вiддiлень\"\r\n          variant=\"h1\"\r\n          component={\"h2\"}\r\n          sx={{ display: \"none\" }}\r\n        >\r\n          Список вiддiлень\r\n        </Typography>\r\n        <Container sx={{ pt: \"3rem\", pb: \"3rem\" }}>\r\n          <CitiesSelect />\r\n          <DepartmentsSelect />\r\n          {departments.length > 0 && <DepartmentsPagination />}\r\n          {city && <DepartmentsList departmentsData={departmentsData} />}\r\n        </Container>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageDepartments;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","departmentsCitiesDataSelector","state","departmentsState","citiesData","data","departmentsDataSelector","departmentsData","departmentsTotalCountSelector","info","departmentsLoadingSelector","loading","departmentsPageSelector","page","departmentsDepartmentRefSelector","departmentRef","departmentsSelectValueSelector","departmentsSelectValue","departmentsCitySelector","city","MyBox","styled","Box","display","alignItems","justifyContent","marginBottom","selectStyles","container","provided","_objectSpread","width","maxWidth","_useState","useState","_useState2","_slicedToArray","filter","setFilter","dispatch","useEffect","getDepartmentsCities","cities","filteredCitiesOptions","_ref","Description","toLowerCase","startsWith","map","_ref2","value","label","_jsx","Loader","Styled","children","Select","isSearchable","styles","onInputChange","onChange","event","setCity","setFindDepartmentByRef","setPage","setDepartmentsSelectValue","citiesOnChange","name","required","placeholder","noOptionsMessage","options","maxMenuHeight","departments","departmentsOptions","length","concat","_toConsumableArray","Ref","newValue","isDisabled","paginationSize","useMediaQuery","totalCount","Stack","spacing","Pagination","size","_","paginationOnChange","count","Math","ceil","shape","Grid","CityDescription","Schedule","Phone","item","xs","sm","md","Card","sx","height","_jsxs","CardContent","Typography","variant","component","gutterBottom","fontSize","color","Object","entries","_ref3","_ref4","day","time","nanoid","getDepartments","filteredDepartments","_Fragment","Header","Container","pt","pb","CitiesSelect","DepartmentsSelect","DepartmentsPagination","DepartmentsList"],"sourceRoot":""}